import { exec } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üåê ABRINDO BUNDLE ANALYZER...\n');

const statsPath = path.join(__dirname, '../dist/stats.html');

if (!fs.existsSync(statsPath)) {
  console.log('‚ùå Arquivo stats.html n√£o encontrado!');
  console.log('üí° Execute npm run build primeiro para gerar o bundle analyzer.');
  process.exit(1);
}

console.log('üìä Bundle Analyzer encontrado!');
console.log(`üìç Caminho: ${statsPath}`);
console.log('üöÄ Abrindo no navegador padr√£o...\n');

// Detectar o sistema operacional e abrir o arquivo
const platform = process.platform;

try {
  if (platform === 'win32') {
    // Windows
    exec(`start "" "${statsPath}"`, (error) => {
      if (error) {
        console.log('‚ùå Erro ao abrir no Windows:', error.message);
        console.log('üí° Abra manualmente:', statsPath);
      } else {
        console.log('‚úÖ Bundle Analyzer aberto com sucesso!');
        console.log('üîç Analise os chunks e otimize seu bundle');
      }
    });
  } else if (platform === 'darwin') {
    // macOS
    exec(`open "${statsPath}"`, (error) => {
      if (error) {
        console.log('‚ùå Erro ao abrir no macOS:', error.message);
        console.log('üí° Abra manualmente:', statsPath);
      } else {
        console.log('‚úÖ Bundle Analyzer aberto com sucesso!');
        console.log('üîç Analise os chunks e otimize seu bundle');
      }
    });
  } else {
    // Linux e outros
    exec(`xdg-open "${statsPath}"`, (error) => {
      if (error) {
        console.log('‚ùå Erro ao abrir no Linux:', error.message);
        console.log('üí° Abra manualmente:', statsPath);
      } else {
        console.log('‚úÖ Bundle Analyzer aberto com sucesso!');
        console.log('üîç Analise os chunks e otimize seu bundle');
      }
    });
  }
} catch (error) {
  console.log('‚ùå Erro ao executar comando de abertura:', error.message);
  console.log('üí° Abra manualmente:', statsPath);
}

console.log('\nüìã INSTRU√á√ïES DE USO:');
console.log('1. üîç Use o zoom para navegar pelos chunks');
console.log('2. üìä Clique nos chunks para ver detalhes');
console.log('3. üìà Analise o tamanho de cada depend√™ncia');
console.log('4. üí° Identifique oportunidades de otimiza√ß√£o');
console.log('5. üéØ Foque nos chunks maiores primeiro');

console.log('\nüí° DICAS DE OTIMIZA√á√ÉO:');
console.log('‚Ä¢ Chunks > 800KB: Considere code splitting');
console.log('‚Ä¢ Vendor chunks grandes: Otimize depend√™ncias');
console.log('‚Ä¢ CSS > 30%: Considere purging de CSS');
console.log('‚Ä¢ Muitos chunks pequenos: Consolide se necess√°rio');
